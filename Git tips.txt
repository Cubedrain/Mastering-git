To initialize a new repo for git -- command -- git init
To edit your user credentials such as email or name use the command --> git config --global user.email [name of email] "llwmuchiri@gmail.com"
To configure the branch used at the moment use the command --> git config --global init.defaultBranch [name of branch]
Adding files to git --> git add . (to add all) or git add [specific file] --> git hello.js
Commiting files to git for storage --> git commit -m "Message here to pass to github"

To check on previous history of git use --> git log
To check on the status of your repo use --> git status
To temporarily remove some of the commits made in the repo:
    1. Check the log for the hash of the commit
    2. Then checkout via the command --> git checkout [hashed code] --> git checkout 09535b43e96fc9981ac3dc58a817b855de14560a
U can also switch from your head to main state via the command of git checkout i.e git checkout main
Or if u want to discard changes made at head state you can use the command --> git checkout -f main

To change back to your main branch use the command -- git branch -M main
To push your changes in git to github use the command --> git push -u origin main

To create a new branch use the command --> git branch [name of branch]
Switching to the newly created branch use --> git checkout [name of branch]
Shorthand for creating and switching to a new branch --> git checkout -b [name of branch]
To specify the header of the branch use the command --> git branch [name of branch] [name of defined branch to place it in] main

Commit messages should answer the qn: If applied to the codebase, this commit will ________
Pushing a branch in github cloud repo --> use the command --> git push --set-upstream origin [name of feature] --> this command doesnt merge with the main branch but rather adds itself as a branch in the github local repo but no merging and changes committed and tracked within the branch are stored only within that branch
To push to changes made in the branch use git push -u origin [name of branch] normally it sends it to the main branch
    But in this case we are using a different branch.
    Git push
Git pull --> to get into track with commited changes, you should pull in the changes into the branch incase someone else makes changes to the branch beforehand
    Command --> git pull

Steps in forking
1. Clone the repository
2. Create a new branch from the main or another branch
3. Make your changes
4. Push the branch to the remote repo
5. Open a Pull Request
6. Merge the changes
7. Pull the merged changes into your local main branch
8. Repeat from step 2

So some steps to consider within the file.
some writing of some text from the Future branch

Methods of removing commits from the git repo:
Types of resets:
1. -- soft -> stages the commits into a working directory --> git reset --soft <commit-hash>
2. -- hard --> deletes commits made before the current commit on time or being planned for --> git reset --hard <commit-hash>
3. mixed -> same to soft but with an option of purely deleiting it. --> git reset <commit-hash>

Reverting commits --> going back to a previous commit
Git revert <<hash code>>
Check the code for where to erase
then git revert --continue to finalize on reversion

To handle a merge conflict:
1. First pull in all changes made via git pull
2. Merge your branch with the main branch via git merge main or git merge
3. Make your changes
4. add and commit necessarily and correctfully
5. Push your changes to git

Merge conflicts occur when changes made to the file are done by 2 people on the same line of the file.

Git revert,reset stash

Git stash used to keep changes made from your final commit to where u have reached and not yet addded to the git local repo
1. Start by making changes and simply saving them to the file.
2. Call in git stash to store in those changes
3. If you want a list of the stashes made in your repo do --> git stash list
4. to apply the changes from the stash do --> git stash apply <stash name> e.g. git stash apply stash@{0}